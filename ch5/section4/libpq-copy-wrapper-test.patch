diff --git a/src/backend/replication/libpqwalreceiver/libpqwalreceiver.c b/src/backend/replication/libpqwalreceiver/libpqwalreceiver.c
index 096a08eea6..6d02d52180 100644
--- a/src/backend/replication/libpqwalreceiver/libpqwalreceiver.c
+++ b/src/backend/replication/libpqwalreceiver/libpqwalreceiver.c
@@ -33,6 +33,7 @@
 #include "utils/memutils.h"
 #include "utils/pg_lsn.h"
 #include "utils/tuplestore.h"
+#include "libpq-int.h"
 
 PG_MODULE_MAGIC;
 
@@ -83,6 +84,15 @@ static WalRcvExecResult *libpqrcv_exec(WalReceiverConn *conn,
 									   const Oid *retTypes);
 static void libpqrcv_disconnect(WalReceiverConn *conn);
 
+/* c.huang added */
+static WalReceiverConn *_netbuf_connect(const char *conninfo);
+
+static void _netbuf_send(WalReceiverConn *conn, const char *buffer,
+		  int nbytes);
+
+static int _netbuf_recv(WalReceiverConn *conn, char **buffer,
+		 pgsocket *wait_fd);
+
 static WalReceiverFunctionsType PQWalReceiverFunctions = {
 	libpqrcv_connect,
 	libpqrcv_check_conninfo,
@@ -98,7 +108,11 @@ static WalReceiverFunctionsType PQWalReceiverFunctions = {
 	libpqrcv_create_slot,
 	libpqrcv_get_backend_pid,
 	libpqrcv_exec,
-	libpqrcv_disconnect
+	libpqrcv_disconnect,
+	/* c.huang added */
+	_netbuf_connect,
+	_netbuf_send,
+	_netbuf_recv
 };
 
 /* Prototypes for private functions */
@@ -230,7 +244,7 @@ libpqrcv_connect(const char *conninfo, bool logical, const char *appname,
 		if (PQresultStatus(res) != PGRES_TUPLES_OK)
 		{
 			PQclear(res);
-			*err = psprintf(_("could not clear search path: %s"),
+			*err = psprintf(("could not clear search path: %s"),
 							pchomp(PQerrorMessage(conn->streamConn)));
 			goto bad_connection;
 		}
@@ -297,7 +311,7 @@ libpqrcv_get_conninfo(WalReceiverConn *conn)
 		ereport(ERROR,
 				(errcode(ERRCODE_OUT_OF_MEMORY),
 				 errmsg("could not parse connection string: %s",
-						_("out of memory"))));
+						("out of memory"))));
 
 	/* build a clean connection string from pieces */
 	for (conn_opt = conn_opts; conn_opt->keyword != NULL; conn_opt++)
@@ -1101,13 +1115,13 @@ libpqrcv_exec(WalReceiverConn *conn, const char *query,
 			/* Empty query is considered error. */
 		case PGRES_EMPTY_QUERY:
 			walres->status = WALRCV_ERROR;
-			walres->err = _("empty query");
+			walres->err = ("empty query");
 			break;
 
 		case PGRES_PIPELINE_SYNC:
 		case PGRES_PIPELINE_ABORTED:
 			walres->status = WALRCV_ERROR;
-			walres->err = _("unexpected pipeline mode");
+			walres->err = ("unexpected pipeline mode");
 			break;
 
 		case PGRES_NONFATAL_ERROR:
@@ -1169,3 +1183,120 @@ stringlist_to_identifierstr(PGconn *conn, List *strings)
 
 	return res.data;
 }
+
+/* c.huang added */
+static WalReceiverConn *_netbuf_connect(const char *conninfo)
+{
+	WalReceiverConn *conn = NULL;
+
+	conn = palloc0(sizeof(WalReceiverConn));
+	conn->streamConn = PQconnectdb(conninfo);
+	pg_set_block(conn->streamConn->sock);
+
+	/* Check to see that the backend connection was successfully made */
+	if (PQstatus(conn->streamConn) != CONNECTION_OK)
+	{
+		elog(WARNING, "_libpqbe_connect - Failed to connect to primary server");
+//		pfree(conn->streamConn );
+		PQfinish(conn->streamConn);
+		return NULL;
+	}
+	conn->streamConn->asyncStatus = PGASYNC_COPY_BOTH;
+	return conn;
+}
+
+static void _netbuf_send(WalReceiverConn *conn, const char *buffer,
+		  int nbytes)
+{
+	if (PQputCopyData(conn->streamConn, buffer, nbytes) <= 0 ||
+		PQflush(conn->streamConn))
+		ereport(ERROR,
+				(errcode(ERRCODE_CONNECTION_FAILURE),
+				 errmsg("could not send data to WAL stream: %s",
+						pchomp(PQerrorMessage(conn->streamConn)))));
+}
+
+static int _netbuf_recv(WalReceiverConn *conn, char **buffer,
+		 pgsocket *wait_fd)
+{
+	int			rawlen;
+
+	if (conn->recvBuf != NULL)
+		PQfreemem(conn->recvBuf);
+	conn->recvBuf = NULL;
+
+	/* Try to receive a CopyData message */
+	rawlen = PQgetCopyData(conn->streamConn, &conn->recvBuf, 0);
+	if (rawlen == 0)
+	{
+		/* Try consuming some data. */
+		if (PQconsumeInput(conn->streamConn) == 0)
+			ereport(ERROR,
+					(errcode(ERRCODE_CONNECTION_FAILURE),
+					 errmsg("could not receive data from WAL stream: %s",
+							pchomp(PQerrorMessage(conn->streamConn)))));
+
+		/* Now that we've consumed some input, try again */
+		rawlen = PQgetCopyData(conn->streamConn, &conn->recvBuf, 0);
+		if (rawlen == 0)
+		{
+			/* Tell caller to try again when our socket is ready. */
+			*wait_fd = PQsocket(conn->streamConn);
+			return 0;
+		}
+	}
+	if (rawlen == -1)			/* end-of-streaming or error */
+	{
+		PGresult   *res;
+
+		res = libpqrcv_PQgetResult(conn->streamConn);
+		if (PQresultStatus(res) == PGRES_COMMAND_OK)
+		{
+			PQclear(res);
+
+			/* Verify that there are no more results. */
+			res = libpqrcv_PQgetResult(conn->streamConn);
+			if (res != NULL)
+			{
+				PQclear(res);
+
+				/*
+				 * If the other side closed the connection orderly (otherwise
+				 * we'd seen an error, or PGRES_COPY_IN) don't report an error
+				 * here, but let callers deal with it.
+				 */
+				if (PQstatus(conn->streamConn) == CONNECTION_BAD)
+					return -1;
+
+				ereport(ERROR,
+						(errcode(ERRCODE_PROTOCOL_VIOLATION),
+						 errmsg("unexpected result after CommandComplete: %s",
+								PQerrorMessage(conn->streamConn))));
+			}
+
+			return -1;
+		}
+		else if (PQresultStatus(res) == PGRES_COPY_IN)
+		{
+			PQclear(res);
+			return -1;
+		}
+		else
+		{
+			PQclear(res);
+			ereport(ERROR,
+					(errcode(ERRCODE_PROTOCOL_VIOLATION),
+					 errmsg("could not receive data from WAL stream: %s",
+							pchomp(PQerrorMessage(conn->streamConn)))));
+		}
+	}
+	if (rawlen < -1)
+		ereport(ERROR,
+				(errcode(ERRCODE_PROTOCOL_VIOLATION),
+				 errmsg("could not receive data from WAL stream: %s",
+						pchomp(PQerrorMessage(conn->streamConn)))));
+
+	/* Return received messages to caller */
+	*buffer = conn->recvBuf;
+	return rawlen;
+}
diff --git a/src/backend/storage/buffer/bufmgr.c b/src/backend/storage/buffer/bufmgr.c
index 9fcb3d6e19..23701dfd34 100644
--- a/src/backend/storage/buffer/bufmgr.c
+++ b/src/backend/storage/buffer/bufmgr.c
@@ -5015,3 +5015,52 @@ TestForOldSnapshot_impl(Snapshot snapshot, Relation relation)
 				(errcode(ERRCODE_SNAPSHOT_TOO_OLD),
 				 errmsg("snapshot too old")));
 }
+
+int netbuf_read(RelFileNode rnode, ForkNumber forknum, BlockNumber blknum, char *sendbuf)
+{
+	BufferTag	newTag;
+	uint32		newHash;
+	LWLock	   *newPartitionLock;
+	int			buf_id;
+	BufferDesc *bufHdr;
+	Block		bufBlock;
+	int 		data_len;
+
+	Assert(BlockNumberIsValid(forknum));
+	INIT_BUFFERTAG(newTag, rnode, forknum, blknum);
+	newHash = BufTableHashCode(&newTag);
+	newPartitionLock = BufMappingPartitionLock(newHash);
+	LWLockAcquire(newPartitionLock, LW_SHARED);
+	buf_id = BufTableLookup(&newTag, newHash);
+	LWLockRelease(newPartitionLock);
+
+	memset(sendbuf, 0, BLCKSZ);
+	if (buf_id >= 0)
+	{
+		bufHdr = GetBufferDescriptor(buf_id);
+//		valid = PinBuffer(bufHdr, NULL);
+//		LWLockAcquire(newPartitionLock, LW_SHARED);
+		if (!StartBufferIO(bufHdr, false))
+		{
+			sendbuf[0] = 1;
+			return 1;
+		}
+
+		bufBlock = BufHdrGetBlock(bufHdr);
+		memcpy(sendbuf, bufBlock, BLCKSZ);
+		TerminateBufferIO(bufHdr, false, 0);
+//		LWLockRelease(newPartitionLock);
+//		UnpinBuffer(bufHdr, true);
+
+		elog(DEBUG2, "primary: sending a data block for %d %d %d %d %d",
+					rnode.spcNode, rnode.dbNode, rnode.relNode, forknum, blknum);
+	}
+	else
+	{
+		sendbuf[0] = 1; //buffer tag not found
+	}
+
+	data_len = (buf_id >=0) ? BLCKSZ : 1;
+
+	return data_len;
+}
diff --git a/src/backend/storage/smgr/smgr.c b/src/backend/storage/smgr/smgr.c
index a477f70f0e..4c338f8ea9 100644
--- a/src/backend/storage/smgr/smgr.c
+++ b/src/backend/storage/smgr/smgr.c
@@ -18,6 +18,7 @@
 #include "postgres.h"
 
 #include "access/xlogutils.h"
+#include "access/xlogrecovery.h"
 #include "lib/ilist.h"
 #include "storage/bufmgr.h"
 #include "storage/ipc.h"
@@ -25,7 +26,10 @@
 #include "storage/smgr.h"
 #include "utils/hsearch.h"
 #include "utils/inval.h"
-
+#include "utils/builtins.h"
+#include "replication/walreceiver.h"
+#include "libpq/pqformat.h"
+#include "libpq/libpq.h"
 
 /*
  * This struct of function pointers defines the API between smgr.c and
@@ -98,7 +102,6 @@ static dlist_head unowned_relns;
 /* local function prototypes */
 static void smgrshutdown(int code, Datum arg);
 
-
 /*
  *	smgrinit(), smgrshutdown() -- Initialize or shut down storage
  *								  managers.
@@ -735,3 +738,94 @@ ProcessBarrierSmgrRelease(void)
 	smgrreleaseall();
 	return true;
 }
+
+Datum test_wrapper(PG_FUNCTION_ARGS)
+{
+	int 		rece_len = 1;
+	pgsocket	fd = PGINVALID_SOCKET;
+	StringInfoData buf_blk_request;
+	int			len;
+	char * tmp = NULL;
+	int spc, db, rel, fork, blk;
+	char buffer[BLCKSZ] = {0};
+	char buf2[1024] = {0};
+	WalReceiverConn *wrconn = NULL;
+
+	spc = PG_GETARG_INT32(0);
+	db = PG_GETARG_INT32(1);
+	rel =  PG_GETARG_INT32(2);
+	fork =  PG_GETARG_INT32(3);
+	blk =  PG_GETARG_INT32(4);
+
+	if (!RecoveryInProgress())
+	{
+		sprintf(buf2, "hey, you are not in recovery mode");
+		PG_RETURN_TEXT_P(cstring_to_text(buf2));
+	}
+	load_file("libpqwalreceiver", false);
+
+	if (WalReceiverFunctions == NULL)
+	{
+		sprintf(buf2, "libpqwalreceiver didn't initialize correctly. Cannot continue ");
+		PG_RETURN_TEXT_P(cstring_to_text(buf2));
+	}
+
+	wrconn = netbuf_connect(PrimaryConnInfo);
+	if (!wrconn)
+	{
+		sprintf(buf2, "failed to connect to primary server at %s", PrimaryConnInfo);
+		PG_RETURN_TEXT_P(cstring_to_text(buf2));
+	}
+	else
+	{
+		elog(DEBUG2, ">>>>>>> successfully connected to primary server <<<<<<<< ");
+	}
+
+	initStringInfo(&buf_blk_request);
+	pq_sendbyte(&buf_blk_request, 'N');
+	pq_sendint32(&buf_blk_request, spc);
+	pq_sendint32(&buf_blk_request, db);
+	pq_sendint32(&buf_blk_request, rel);
+	pq_sendint32(&buf_blk_request, fork);
+	pq_sendint32(&buf_blk_request, blk);
+	pq_flush();
+
+	elog(DEBUG2, "standby: requesting %d %d %d %d %d",
+			spc, db, rel, fork, blk);
+
+	/* Send it */
+	netbuf_send(wrconn, buf_blk_request.data, buf_blk_request.len);
+
+	/* Try read the data. */
+	len = netbuf_recv(wrconn, &tmp, &fd);
+	if (len > 0)
+	{
+		/*
+		 * Something was received from primary
+		 */
+		elog(DEBUG2, "standby: receives %d", len);
+		rece_len = len;
+		if (rece_len > 1)
+		{
+			elog(DEBUG2, "standby: receive %d for %d %d %d %d %d",
+					rece_len,  spc, db, rel, fork, blk);
+
+			memcpy(buffer, tmp, rece_len);
+			sprintf(buf2, "standby: receive %d bytes for buffer block (%d %d %d %d %d)",
+					rece_len,  spc, db, rel, fork, blk);
+		}
+		else
+		{
+			sprintf(buf2, "primary does not have this block in buffer (%d %d %d %d %d)",
+					 spc, db, rel, fork, blk);
+		}
+	}
+	else
+	{
+		elog(DEBUG2, "standby: receives %d", len);
+		sprintf(buf2, "fails to receive data from primary for block (%d %d %d %d %d)",
+				 spc, db, rel, fork, blk);
+	}
+	walrcv_disconnect(wrconn);
+	PG_RETURN_TEXT_P(cstring_to_text(buf2));
+}
diff --git a/src/backend/tcop/postgres.c b/src/backend/tcop/postgres.c
index 2fc49e3445..96ec2d2c48 100644
--- a/src/backend/tcop/postgres.c
+++ b/src/backend/tcop/postgres.c
@@ -71,6 +71,7 @@
 #include "storage/proc.h"
 #include "storage/procsignal.h"
 #include "storage/sinval.h"
+#include "storage/buf_internals.h"
 #include "tcop/fastpath.h"
 #include "tcop/pquery.h"
 #include "tcop/tcopprot.h"
@@ -4807,6 +4808,39 @@ PostgresMain(const char *dbname, const char *username)
 				proc_exit(0);
 
 			case 'd':			/* copy data */
+				elog(DEBUG2, "copy data request received");
+				int op;
+
+				op = pq_getmsgbyte(&input_message);
+				if (op == 'N')
+				{
+					StringInfoData buf_blk_reply;
+					BufferTag mytag = {0};
+					char mybuf[BLCKSZ] = {0};
+					int len = 0;
+
+					set_ps_display("Netbuf Data Streaming");
+
+					mytag.rnode.spcNode = pq_getmsgint(&input_message, 4);
+					mytag.rnode.dbNode = pq_getmsgint(&input_message, 4);
+					mytag.rnode.relNode = pq_getmsgint(&input_message, 4);
+					mytag.forkNum = pq_getmsgint(&input_message, 4);
+					mytag.blockNum = pq_getmsgint(&input_message, 4);
+
+					elog(DEBUG2, "primary: receiving %d %d %d %d %d",
+							mytag.rnode.spcNode, mytag.rnode.dbNode, mytag.rnode.relNode, mytag.forkNum, mytag.blockNum);
+
+					pq_getmsgend(&input_message);
+					len = netbuf_read(mytag.rnode, mytag.forkNum, mytag.blockNum, mybuf);
+
+					elog(DEBUG2, "primary: netbuf_read returns %d", len);
+
+					pq_beginmessage(&buf_blk_reply, 'd');
+					pq_sendbytes(&buf_blk_reply, mybuf, len);
+					pq_endmessage(&buf_blk_reply);
+					pq_flush();
+				}
+				break;
 			case 'c':			/* copy done */
 			case 'f':			/* copy fail */
 
diff --git a/src/include/catalog/pg_proc.dat b/src/include/catalog/pg_proc.dat
index 8de88348ec..b8e0bdc0ca 100644
--- a/src/include/catalog/pg_proc.dat
+++ b/src/include/catalog/pg_proc.dat
@@ -11811,5 +11811,7 @@
   proname => 'brin_minmax_multi_summary_send', provolatile => 's',
   prorettype => 'bytea', proargtypes => 'pg_brin_minmax_multi_summary',
   prosrc => 'brin_minmax_multi_summary_send' },
-
+{ oid => '9003', descr => 'trigger libwalreceiver wrapper',
+  proname => 'test_wrapper', proisstrict => 'f', prorettype => 'text',
+  proargtypes => 'int4 int4 int4 int4 int4', prosrc => 'test_wrapper' },
 ]
diff --git a/src/include/replication/walreceiver.h b/src/include/replication/walreceiver.h
index 81184aa92f..0035c0a5d7 100644
--- a/src/include/replication/walreceiver.h
+++ b/src/include/replication/walreceiver.h
@@ -373,6 +373,14 @@ typedef WalRcvExecResult *(*walrcv_exec_fn) (WalReceiverConn *conn,
 											 const int nRetTypes,
 											 const Oid *retTypes);
 
+typedef WalReceiverConn *(*netbuf_connect_fn) (const char *conninfo);
+
+typedef void (*netbuf_send_fn) (WalReceiverConn *conn, const char *buffer,
+		  int nbytes);
+
+typedef int (*netbuf_recv_fn) (WalReceiverConn *conn, char **buffer,
+		 pgsocket *wait_fd);
+
 /*
  * walrcv_disconnect_fn
  *
@@ -397,6 +405,9 @@ typedef struct WalReceiverFunctionsType
 	walrcv_get_backend_pid_fn walrcv_get_backend_pid;
 	walrcv_exec_fn walrcv_exec;
 	walrcv_disconnect_fn walrcv_disconnect;
+	netbuf_connect_fn netbuf_connect;
+	netbuf_send_fn netbuf_send;
+	netbuf_recv_fn netbuf_recv;
 } WalReceiverFunctionsType;
 
 extern PGDLLIMPORT WalReceiverFunctionsType *WalReceiverFunctions;
@@ -432,6 +443,14 @@ extern PGDLLIMPORT WalReceiverFunctionsType *WalReceiverFunctions;
 #define walrcv_disconnect(conn) \
 	WalReceiverFunctions->walrcv_disconnect(conn)
 
+/* c.huang added */
+#define netbuf_connect(conninfo) \
+	WalReceiverFunctions->netbuf_connect(conninfo)
+#define netbuf_send(conninfo, buf, size) \
+	WalReceiverFunctions->netbuf_send(conninfo, buf, size)
+#define netbuf_recv(conninfo, buf, waitfd) \
+	WalReceiverFunctions->netbuf_recv(conninfo, buf, waitfd)
+
 static inline void
 walrcv_clear_result(WalRcvExecResult *walres)
 {
diff --git a/src/include/storage/bufmgr.h b/src/include/storage/bufmgr.h
index 58391406f6..72bf5e64af 100644
--- a/src/include/storage/bufmgr.h
+++ b/src/include/storage/bufmgr.h
@@ -249,6 +249,9 @@ extern void TestForOldSnapshot_impl(Snapshot snapshot, Relation relation);
 extern BufferAccessStrategy GetAccessStrategy(BufferAccessStrategyType btype);
 extern void FreeAccessStrategy(BufferAccessStrategy strategy);
 
+/* in bufmgr.c */
+extern int netbuf_read(RelFileNode rnode, ForkNumber forknum, BlockNumber blknum, char *sendbuf);
+
 
 /* inline functions */
 
